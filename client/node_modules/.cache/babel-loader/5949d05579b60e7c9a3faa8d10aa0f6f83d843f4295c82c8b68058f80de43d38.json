{"ast":null,"code":"import { Brush } from '../tools/Brush';\nimport { Eraser } from '../tools/Eraser';\nimport canvasState from '../store/canvasState';\nimport toolState from '../store/toolState';\nexport const sokcetMessageHandler = msg => {\n  const figure = msg.figure;\n  const [canvas, ctx, socket, id] = [canvasState.canvas, canvasState.ctx, canvasState.socket, canvasState.id];\n  if (!id || !ctx) return;\n  console.log(figure.x, figure.y);\n  switch (figure.type) {\n    case 'brush':\n      if (checkForInstance(toolState.tool)) {\n        toolState.tool.draw(ctx, figure.x, figure.y);\n      } else {\n        toolState.setTool(new Brush(canvas, socket, id));\n        if (!toolState.tool || !(toolState.tool instanceof Brush)) return;\n        toolState.tool.draw(ctx, figure.x, figure.y);\n      }\n      break;\n    case 'eraser':\n      if (toolState.tool instanceof Eraser) {\n        toolState.tool.draw(ctx, figure.x, figure.y);\n      } else {\n        toolState.setTool(new Eraser(canvas, socket, id));\n        if (!toolState.tool || !(toolState.tool instanceof Eraser)) return;\n        toolState.tool.draw(ctx, figure.x, figure.y);\n      }\n      break;\n    default:\n      break;\n  }\n};\nfunction checkForInstance(tool) {\n  if (tool instanceof Brush) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction changeInstance() {\n  toolState.setTool(new Eraser(canvas, socket, id));\n  if (!toolState.tool || !(toolState.tool instanceof Eraser)) return;\n  toolState.tool.draw(ctx, figure.x, figure.y);\n}","map":{"version":3,"names":["Brush","Eraser","canvasState","toolState","sokcetMessageHandler","msg","figure","canvas","ctx","socket","id","console","log","x","y","type","checkForInstance","tool","draw","setTool","changeInstance"],"sources":["C:/Users/mistR/OneDrive/Рабочий стол/React/ts/paint-ts/client/src/sokcet/socket.ts"],"sourcesContent":["import {MessageI} from '../model/msgI';\r\nimport { Brush } from '../tools/Brush';\r\nimport { Eraser } from '../tools/Eraser';\r\nimport canvasState from '../store/canvasState';\r\nimport toolState from '../store/toolState';\r\nimport { Tool } from '../tools/Tool';\r\n\r\nexport const sokcetMessageHandler = (msg: MessageI) => {\r\n    const figure = msg.figure;\r\n    const [canvas, ctx, socket, id] = [canvasState.canvas, canvasState.ctx, canvasState.socket, canvasState.id];\r\n    if(!id || !ctx) return;\r\n    console.log(figure.x, figure.y);\r\n    switch (figure.type) {\r\n        case 'brush':\r\n            if(checkForInstance(toolState.tool)) {\r\n                toolState.tool.draw(ctx, figure.x, figure.y);\r\n            } else {\r\n                toolState.setTool(new Brush(canvas, socket, id));\r\n                if(!toolState.tool || !(toolState.tool instanceof Brush) ) return;\r\n                toolState.tool.draw(ctx, figure.x, figure.y);\r\n            }\r\n            \r\n            break;\r\n            \r\n        case 'eraser':\r\n            if(toolState.tool instanceof Eraser) {\r\n                toolState.tool.draw(ctx, figure.x, figure.y);\r\n            } else {\r\n                toolState.setTool(new Eraser(canvas, socket, id));\r\n                if(!toolState.tool || !(toolState.tool instanceof Eraser) ) return;\r\n                toolState.tool.draw(ctx, figure.x, figure.y);\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}  \r\n\r\n\r\nfunction checkForInstance<T>(tool: T): boolean {\r\n    if(tool instanceof Brush) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction changeInstance() {\r\n    toolState.setTool(new Eraser(canvas, socket, id));\r\n    if(!toolState.tool || !(toolState.tool instanceof Eraser) ) return;\r\n    toolState.tool.draw(ctx, figure.x, figure.y);\r\n}"],"mappings":"AACA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,MAAM,QAAQ,iBAAiB;AACxC,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,SAAS,MAAM,oBAAoB;AAG1C,OAAO,MAAMC,oBAAoB,GAAIC,GAAa,IAAK;EACnD,MAAMC,MAAM,GAAGD,GAAG,CAACC,MAAM;EACzB,MAAM,CAACC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAEC,EAAE,CAAC,GAAG,CAACR,WAAW,CAACK,MAAM,EAAEL,WAAW,CAACM,GAAG,EAAEN,WAAW,CAACO,MAAM,EAAEP,WAAW,CAACQ,EAAE,CAAC;EAC3G,IAAG,CAACA,EAAE,IAAI,CAACF,GAAG,EAAE;EAChBG,OAAO,CAACC,GAAG,CAACN,MAAM,CAACO,CAAC,EAAEP,MAAM,CAACQ,CAAC,CAAC;EAC/B,QAAQR,MAAM,CAACS,IAAI;IACf,KAAK,OAAO;MACR,IAAGC,gBAAgB,CAACb,SAAS,CAACc,IAAI,CAAC,EAAE;QACjCd,SAAS,CAACc,IAAI,CAACC,IAAI,CAACV,GAAG,EAAEF,MAAM,CAACO,CAAC,EAAEP,MAAM,CAACQ,CAAC,CAAC;MAChD,CAAC,MAAM;QACHX,SAAS,CAACgB,OAAO,CAAC,IAAInB,KAAK,CAACO,MAAM,EAAEE,MAAM,EAAEC,EAAE,CAAC,CAAC;QAChD,IAAG,CAACP,SAAS,CAACc,IAAI,IAAI,EAAEd,SAAS,CAACc,IAAI,YAAYjB,KAAK,CAAC,EAAG;QAC3DG,SAAS,CAACc,IAAI,CAACC,IAAI,CAACV,GAAG,EAAEF,MAAM,CAACO,CAAC,EAAEP,MAAM,CAACQ,CAAC,CAAC;MAChD;MAEA;IAEJ,KAAK,QAAQ;MACT,IAAGX,SAAS,CAACc,IAAI,YAAYhB,MAAM,EAAE;QACjCE,SAAS,CAACc,IAAI,CAACC,IAAI,CAACV,GAAG,EAAEF,MAAM,CAACO,CAAC,EAAEP,MAAM,CAACQ,CAAC,CAAC;MAChD,CAAC,MAAM;QACHX,SAAS,CAACgB,OAAO,CAAC,IAAIlB,MAAM,CAACM,MAAM,EAAEE,MAAM,EAAEC,EAAE,CAAC,CAAC;QACjD,IAAG,CAACP,SAAS,CAACc,IAAI,IAAI,EAAEd,SAAS,CAACc,IAAI,YAAYhB,MAAM,CAAC,EAAG;QAC5DE,SAAS,CAACc,IAAI,CAACC,IAAI,CAACV,GAAG,EAAEF,MAAM,CAACO,CAAC,EAAEP,MAAM,CAACQ,CAAC,CAAC;MAChD;MACA;IACJ;MACI;EACR;AACJ,CAAC;AAGD,SAASE,gBAAgBA,CAAIC,IAAO,EAAW;EAC3C,IAAGA,IAAI,YAAYjB,KAAK,EAAE;IACtB,OAAO,IAAI;EACf,CAAC,MAAM;IACH,OAAO,KAAK;EAChB;AACJ;AAEA,SAASoB,cAAcA,CAAA,EAAG;EACtBjB,SAAS,CAACgB,OAAO,CAAC,IAAIlB,MAAM,CAACM,MAAM,EAAEE,MAAM,EAAEC,EAAE,CAAC,CAAC;EACjD,IAAG,CAACP,SAAS,CAACc,IAAI,IAAI,EAAEd,SAAS,CAACc,IAAI,YAAYhB,MAAM,CAAC,EAAG;EAC5DE,SAAS,CAACc,IAAI,CAACC,IAAI,CAACV,GAAG,EAAEF,MAAM,CAACO,CAAC,EAAEP,MAAM,CAACQ,CAAC,CAAC;AAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}