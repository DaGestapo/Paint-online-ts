{"ast":null,"code":"import canvasState from '../store/canvasState';\nimport toolState from '../store/toolState';\nimport { drawHandler } from './drawHandler';\nimport { changeSettingHandler } from './settingHandler';\nimport { localStorageHandler } from './localStorageHandler';\nconst connectionHandler = msg => {\n  const savedCanvas = localStorage.getItem(msg.id) ? localStorage.getItem(msg.id) : null;\n  const ctx = canvasState.ctx ? canvasState.ctx : null;\n  if (savedCanvas && ctx) {\n    const img = document.createElement('img');\n    img.src = savedCanvas;\n    ctx.drawImage(img, 0, 0, 600, 400);\n  }\n};\nexport const setSocketListener = socket => {\n  socket.onmessage = msg => {\n    const parsedMsg = JSON.parse(msg.data);\n    if (!toolState.tool || !canvasState.ctx) return;\n    switch (parsedMsg.method) {\n      case 'connection':\n        connectionHandler(parsedMsg);\n        break;\n      case 'draw':\n        drawHandler(parsedMsg);\n        break;\n      case 'setting':\n        changeSettingHandler(parsedMsg);\n        break;\n      case 'localStorage':\n        localStorageHandler(parsedMsg);\n        break;\n      case 'finish':\n        canvasState.pushToUndo();\n        canvasState.ctx.beginPath();\n        break;\n      default:\n        break;\n    }\n  };\n};\nexport const handlerUserConnection = (socket, id) => {\n  return username => {\n    var _canvasState$socket;\n    canvasState.setWebSocket(socket);\n    canvasState.setId(id);\n    (_canvasState$socket = canvasState.socket) === null || _canvasState$socket === void 0 ? void 0 : _canvasState$socket.send(JSON.stringify({\n      id: id,\n      method: 'connection',\n      username: username\n    }));\n  };\n};","map":{"version":3,"names":["canvasState","toolState","drawHandler","changeSettingHandler","localStorageHandler","connectionHandler","msg","savedCanvas","localStorage","getItem","id","ctx","img","document","createElement","src","drawImage","setSocketListener","socket","onmessage","parsedMsg","JSON","parse","data","tool","method","pushToUndo","beginPath","handlerUserConnection","username","_canvasState$socket","setWebSocket","setId","send","stringify"],"sources":["C:/Users/mistR/OneDrive/Рабочий стол/React/ts/paint-ts/client/src/sokcet/socket.ts"],"sourcesContent":["import canvasState from '../store/canvasState';\r\nimport toolState from '../store/toolState';\r\n\r\nimport { ConnectionI } from '../model/msgI';\r\n\r\n\r\nimport { drawHandler } from './drawHandler';\r\nimport { changeSettingHandler } from './settingHandler';\r\nimport { localStorageHandler } from './localStorageHandler';\r\n\r\nconst connectionHandler = (msg: ConnectionI) => {\r\n        const savedCanvas = localStorage.getItem(msg.id)\r\n            ? localStorage.getItem(msg.id)\r\n            : null;\r\n        const ctx = canvasState.ctx\r\n            ? canvasState.ctx\r\n            : null;\r\n\r\n        if(savedCanvas && ctx) {\r\n            const img = document.createElement('img');\r\n            img.src = savedCanvas;\r\n            ctx.drawImage(img, 0, 0, 600, 400);\r\n        }\r\n}\r\n\r\nexport const setSocketListener = (socket: WebSocket) => {\r\n    socket.onmessage = (msg) => {\r\n        const parsedMsg = JSON.parse(msg.data);\r\n        if(!toolState.tool || !canvasState.ctx) return;\r\n        switch (parsedMsg.method) {\r\n\r\n            case 'connection': \r\n                connectionHandler(parsedMsg);\r\n                break;\r\n\r\n            case 'draw':\r\n                drawHandler(parsedMsg);\r\n                break;\r\n\r\n            case 'setting': \r\n                changeSettingHandler(parsedMsg);\r\n                break;\r\n\r\n            case 'localStorage':\r\n                localStorageHandler(parsedMsg)\r\n                break;\r\n    \r\n            case 'finish':\r\n                canvasState.pushToUndo();\r\n                canvasState.ctx.beginPath();\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    \r\n    }\r\n} \r\n\r\nexport const handlerUserConnection = (socket: WebSocket, id: string): Function => {\r\n\r\n    return (username: string) => {\r\n        canvasState.setWebSocket(socket);\r\n        canvasState.setId(id);\r\n    \r\n        canvasState.socket?.send(JSON.stringify({\r\n          id: id,\r\n          method: 'connection',\r\n          username: username\r\n      }));\r\n    }\r\n  }\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,SAAS,MAAM,oBAAoB;AAK1C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,MAAMC,iBAAiB,GAAIC,GAAgB,IAAK;EACxC,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAACH,GAAG,CAACI,EAAE,CAAC,GAC1CF,YAAY,CAACC,OAAO,CAACH,GAAG,CAACI,EAAE,CAAC,GAC5B,IAAI;EACV,MAAMC,GAAG,GAAGX,WAAW,CAACW,GAAG,GACrBX,WAAW,CAACW,GAAG,GACf,IAAI;EAEV,IAAGJ,WAAW,IAAII,GAAG,EAAE;IACnB,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACzCF,GAAG,CAACG,GAAG,GAAGR,WAAW;IACrBI,GAAG,CAACK,SAAS,CAACJ,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;EACtC;AACR,CAAC;AAED,OAAO,MAAMK,iBAAiB,GAAIC,MAAiB,IAAK;EACpDA,MAAM,CAACC,SAAS,GAAIb,GAAG,IAAK;IACxB,MAAMc,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAChB,GAAG,CAACiB,IAAI,CAAC;IACtC,IAAG,CAACtB,SAAS,CAACuB,IAAI,IAAI,CAACxB,WAAW,CAACW,GAAG,EAAE;IACxC,QAAQS,SAAS,CAACK,MAAM;MAEpB,KAAK,YAAY;QACbpB,iBAAiB,CAACe,SAAS,CAAC;QAC5B;MAEJ,KAAK,MAAM;QACPlB,WAAW,CAACkB,SAAS,CAAC;QACtB;MAEJ,KAAK,SAAS;QACVjB,oBAAoB,CAACiB,SAAS,CAAC;QAC/B;MAEJ,KAAK,cAAc;QACfhB,mBAAmB,CAACgB,SAAS,CAAC;QAC9B;MAEJ,KAAK,QAAQ;QACTpB,WAAW,CAAC0B,UAAU,CAAC,CAAC;QACxB1B,WAAW,CAACW,GAAG,CAACgB,SAAS,CAAC,CAAC;QAC3B;MAEJ;QACI;IACR;EAEJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAGA,CAACV,MAAiB,EAAER,EAAU,KAAe;EAE9E,OAAQmB,QAAgB,IAAK;IAAA,IAAAC,mBAAA;IACzB9B,WAAW,CAAC+B,YAAY,CAACb,MAAM,CAAC;IAChClB,WAAW,CAACgC,KAAK,CAACtB,EAAE,CAAC;IAErB,CAAAoB,mBAAA,GAAA9B,WAAW,CAACkB,MAAM,cAAAY,mBAAA,uBAAlBA,mBAAA,CAAoBG,IAAI,CAACZ,IAAI,CAACa,SAAS,CAAC;MACtCxB,EAAE,EAAEA,EAAE;MACNe,MAAM,EAAE,YAAY;MACpBI,QAAQ,EAAEA;IACd,CAAC,CAAC,CAAC;EACL,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}