{"ast":null,"code":"import { Brush, Circle, Eraser, Rect, Line } from '../tools/ToolsRouter';\nimport canvasState from '../store/canvasState';\nimport toolState from '../store/toolState';\nexport const sokcetMessageHandler = msg => {\n  if (!toolState.tool) return;\n  const figure = msg.figure;\n  const [canvas, ctx, socket, id] = [canvasState.canvas, canvasState.ctx, canvasState.socket, canvasState.id];\n  let [tool, toolName] = [toolState.tool, toolState.tool.getToolName];\n  if (!id || !ctx || !canvas || !socket) return;\n  switch (figure.type) {\n    case 'brush':\n      if (toolName === 'brush' && tool instanceof Brush) {\n        tool.draw(ctx, figure.x, figure.y);\n      } else {\n        tool = new Brush(canvas, socket, ctx, id);\n        if (!tool || !(tool instanceof Brush)) return;\n        tool.draw(ctx, figure.x, figure.y);\n      }\n      break;\n    case 'eraser':\n      if (toolName === 'eraser' && tool instanceof Brush) {\n        tool.draw(ctx, figure.x, figure.y);\n      } else {\n        tool = new Eraser(canvas, socket, ctx, id);\n        if (!tool || !(tool instanceof Eraser)) return;\n        tool.draw(ctx, figure.x, figure.y);\n      }\n      break;\n    case 'rect':\n      if (!figure.w || !figure.h) return;\n      if (toolName === 'rect' && tool instanceof Rect) {\n        tool.savedCanvas = canvas.toDataURL();\n        tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\n      } else {\n        tool = new Rect(canvas, socket, ctx, id);\n        if (!tool || !(tool instanceof Rect)) return;\n        tool.savedCanvas = canvas.toDataURL();\n        tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\n      }\n      break;\n    case 'circle':\n      if (!figure.w || !figure.h) return;\n      if (toolName === 'circle' && tool instanceof Circle) {\n        tool.savedCanvas = canvas.toDataURL();\n        tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\n      } else {\n        tool = new Circle(canvas, socket, ctx, id);\n        if (!tool || !(tool instanceof Circle)) return;\n        tool.savedCanvas = canvas.toDataURL();\n        tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\n      }\n      break;\n    case 'line':\n      if (!figure.w || !figure.h) return;\n      if (toolName === 'line' && tool instanceof Line) {\n        tool.savedCanvas = canvas.toDataURL();\n        tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\n      } else {\n        tool = new Line(canvas, socket, ctx, id);\n        if (!tool || !(tool instanceof Line)) return;\n        tool.savedCanvas = canvas.toDataURL();\n        tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\n      }\n      break;\n    default:\n      break;\n  }\n};","map":{"version":3,"names":["Brush","Circle","Eraser","Rect","Line","canvasState","toolState","sokcetMessageHandler","msg","tool","figure","canvas","ctx","socket","id","toolName","getToolName","type","draw","x","y","w","h","savedCanvas","toDataURL","staticDraw"],"sources":["C:/Users/mistR/OneDrive/Рабочий стол/React/ts/paint-ts/client/src/sokcet/drawHandler.ts"],"sourcesContent":["import {MessageDrawI} from '../model/msgI';\r\nimport { Brush, Circle, Eraser, Rect, Line } from '../tools/ToolsRouter';\r\nimport canvasState from '../store/canvasState';\r\nimport toolState from '../store/toolState';\r\n\r\n\r\nexport const sokcetMessageHandler = (msg: MessageDrawI) => {\r\n    if(!toolState.tool) return;\r\n\r\n    const figure = msg.figure;\r\n    const [canvas, ctx, socket, id] = [\r\n        canvasState.canvas, \r\n        canvasState.ctx, \r\n        canvasState.socket, \r\n        canvasState.id\r\n    ];\r\n    let [tool, toolName] = [\r\n        toolState.tool,\r\n        toolState.tool.getToolName\r\n    ]\r\n\r\n    if(!id || !ctx || !canvas || !socket) return;\r\n\r\n    switch (figure.type) {\r\n        case 'brush':\r\n            if(toolName === 'brush' && tool instanceof Brush) {\r\n                tool.draw(ctx, figure.x, figure.y);\r\n            } else {\r\n                tool = new Brush(canvas, socket, ctx, id);\r\n                if(!tool || !(tool instanceof Brush) ) return;\r\n                tool.draw(ctx, figure.x, figure.y);\r\n              \r\n            }\r\n            break;\r\n            \r\n        case 'eraser':\r\n            if(toolName === 'eraser' && tool instanceof Brush) {\r\n                tool.draw(ctx, figure.x, figure.y);\r\n               \r\n            } else {\r\n                tool = new Eraser(canvas, socket, ctx, id);\r\n                if(!tool || !(tool instanceof Eraser) ) return;\r\n                tool.draw(ctx, figure.x, figure.y);\r\n            }\r\n            break;\r\n\r\n        case 'rect':\r\n            if(!figure.w || !figure.h) return;\r\n\r\n            if(toolName === 'rect' && tool instanceof Rect) {\r\n                tool.savedCanvas = canvas.toDataURL();\r\n                tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\r\n            } else {\r\n                tool = new Rect(canvas, socket, ctx, id);\r\n                if(!tool || !(tool instanceof Rect) ) return;\r\n\r\n                tool.savedCanvas = canvas.toDataURL();\r\n                tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\r\n            }\r\n            break;\r\n\r\n        case 'circle':\r\n            if(!figure.w || !figure.h) return;\r\n\r\n            if(toolName === 'circle' && tool instanceof Circle) {\r\n                tool.savedCanvas = canvas.toDataURL();\r\n                tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\r\n            } else {\r\n                tool = new Circle(canvas, socket, ctx, id);\r\n                if(!tool || !(tool instanceof Circle) ) return;\r\n\r\n                tool.savedCanvas = canvas.toDataURL();\r\n                tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\r\n            }\r\n            break;\r\n\r\n        case 'line':\r\n            if(!figure.w || !figure.h) return;\r\n\r\n            if(toolName === 'line' && tool instanceof Line) {\r\n                tool.savedCanvas = canvas.toDataURL();\r\n                tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\r\n            } else {\r\n                tool = new Line(canvas, socket, ctx, id);\r\n                if(!tool || !(tool instanceof Line) ) return;\r\n            \r\n                tool.savedCanvas = canvas.toDataURL();\r\n                tool.staticDraw(ctx, figure.x, figure.y, figure.w, figure.h);\r\n            }\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}  \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}